{
  "hash": "585dc7a66638f66a736017709d1bd9e2",
  "result": {
    "markdown": "---\ntitle: \"1. Numerical Integration\"\nformat: html\neditor: visual\nexecute:\n  freeze: auto\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"devtools\")\nlibrary(devtools)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: usethis\n```\n:::\n\n```{.r .cell-code}\ninstall_github(\"j-buss/RSSim\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSkipping install of 'RSSim' from a github remote, the SHA1 (b515ad69) has not changed since last install.\n  Use `force = TRUE` to force installation\n```\n:::\n\n```{.r .cell-code}\nlibrary(RSSim)\n```\n:::\n\n\n\n# Numerical Integration\n\n# Chapter 3 - Random Numbers\n\n## 3.1 Pseudorandom number generation\n\n### Multiplicative Congruential Method\n\nAlso known as a [Lehmer random number generator](https://en.wikipedia.org/wiki/Lehmer_random_number_generator).\n\n$$\nx_n = a x_{n-1} \\,\\text{mod}\\, m\n$$\n\nThe limits on the parameters are: $0 < x_0 <m$\n\nIf we use the values\n\n-   $a = 2$\n-   $m = 7$\n-   $x_0 = 6$\n\nWe have:\n\n|                $X$                 |\n|:----------------------------------:|\n|              $x_0=6$               |\n| $x_1=5=2 \\cdot 6 \\;\\text{mod}\\; 7$ |\n| $x_2=3=2 \\cdot 5 \\;\\text{mod}\\; 7$ |\n| $x_3=6=2 \\cdot 3 \\;\\text{mod}\\; 7$ |\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlehmer.seq\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x0, a, m, iterations = 1) \n{\n    counter <- 1\n    temp_val <- x0\n    output_vector <- c(temp_val)\n    while (counter < iterations) {\n        temp_val <- (a * temp_val)%%m\n        output_vector <- c(output_vector, temp_val)\n        counter <- counter + 1\n    }\n    output_vector\n}\n<bytecode: 0x599a8355bc18>\n<environment: namespace:RSSim>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlehmer.seq(x0=6, a=2, m=7, iterations = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 6 5 3 6 5 3 6 5 3 6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlehmer.rng\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x0, a, m, iterations = 1) \n{\n    lehmer.seq(x0, a, m, iterations)/m\n}\n<bytecode: 0x599a8567b928>\n<environment: namespace:RSSim>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlehmer.rng(x0=10, a=9, m=4, iterations=19)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5\n```\n:::\n:::\n\n\n\n#### Mixed Congruential Method\n\n[Linear congruential generator](https://en.wikipedia.org/wiki/Linear_congruential_generator) (LCG):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlcg.seq\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x0, a, c, m, iterations = 1) \n{\n    counter <- 1\n    temp_val <- x0\n    output_vector <- c(temp_val)\n    while (counter < iterations) {\n        temp_val <- (a * temp_val + c)%%m\n        output_vector <- c(output_vector, temp_val)\n        counter <- counter + 1\n    }\n    output_vector\n}\n<bytecode: 0x599a863a8e30>\n<environment: namespace:RSSim>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#lcg.seq()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlcg.rng\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x0, a, c, m, iterations = 1) \n{\n    lcg.seq(x0, a, c, m, iterations)/m\n}\n<bytecode: 0x599a8689bf30>\n<environment: namespace:RSSim>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlcg.rng(x0=3, a=5, c=7, m=200)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.015\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#lcg(1)\n```\n:::\n\n\n## 3.2 Using Random numbers to Evaluate Integrals\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}