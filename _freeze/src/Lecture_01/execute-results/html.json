{
  "hash": "d9af3b928ae6ff64980f92ac5fb7ce48",
  "result": {
    "markdown": "---\ntitle: \"1. Numerical Integration\"\nformat: html\neditor: visual\nexecute:\n  echo: false\n  warning: false\n  error: false\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall_github(\"j-buss/RSSim\")\nlibrary(RSSim)\n```\n:::\n\n\n# Numerical Integration\n\n# Chapter 3 - Random Numbers\n\n## 3.1 Pseudorandom number generation\n\n### Multiplicative Congruential Method\n\nAlso known as a [Lehmer random number generator](https://en.wikipedia.org/wiki/Lehmer_random_number_generator).\n\n$$\nx_n = a x_{n-1} \\,\\text{mod}\\, m\n$$\n\nThe limits on the parameters are: $0 < x_0 <m$\n\nIf we use the values\n\n-   $a = 2$\n-   $m = 7$\n-   $x_0 = 6$\n\nWe have:\n\n|                $X$                 |\n|:----------------------------------:|\n|              $x_0=6$               |\n| $x_1=5=2 \\cdot 6 \\;\\text{mod}\\; 7$ |\n| $x_2=3=2 \\cdot 5 \\;\\text{mod}\\; 7$ |\n| $x_3=6=2 \\cdot 3 \\;\\text{mod}\\; 7$ |\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x0, a, m, iterations = 1) \n{\n    counter <- 1\n    temp_val <- x0\n    output_vector <- c(temp_val)\n    while (counter < iterations) {\n        temp_val <- (a * temp_val)%%m\n        output_vector <- c(output_vector, temp_val)\n        counter <- counter + 1\n    }\n    output_vector\n}\n<bytecode: 0x5cacb00da780>\n<environment: namespace:RSSim>\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n [1] 6 5 3 6 5 3 6 5 3 6\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x0, a, m, iterations = 1) \n{\n    lehmer.seq(x0, a, m, iterations)/m\n}\n<bytecode: 0x5cacb0ab6ad8>\n<environment: namespace:RSSim>\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5\n```\n:::\n:::\n\n\n#### Mixed Congruential Method\n\n[Linear congruential generator](https://en.wikipedia.org/wiki/Linear_congruential_generator) (LCG):\n\n::: callout-note\nINSERT Math formula for LCG\n:::\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x0, a, c, m, iterations = 1) \n{\n    counter <- 1\n    temp_val <- x0\n    output_vector <- c(temp_val)\n    while (counter < iterations) {\n        temp_val <- (a * temp_val + c)%%m\n        output_vector <- c(output_vector, temp_val)\n        counter <- counter + 1\n    }\n    output_vector\n}\n<bytecode: 0x5cacb0f2c430>\n<environment: namespace:RSSim>\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x0, a, c, m, iterations = 1) \n{\n    lcg.seq(x0, a, c, m, iterations)/m\n}\n<bytecode: 0x5cacb12f53b8>\n<environment: namespace:RSSim>\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.015\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## 3.2 Using Random numbers to Evaluate Integrals\n\nFunction defined for numerical Integration\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n#### Function 1: \n\n$$\n\\int_0^1 e^{(e^x)} dx\n$$\n\nNow use our numerical integration function\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.219394\n```\n:::\n:::\n\n\nNow use the R function \"integrate\"\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n6.316564 with absolute error < 7e-14\n```\n:::\n:::\n\n\nResults are the same\n\nNow use Monte Carlo Integration:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.322005\n```\n:::\n:::\n\n\n\n#### Function 2:\n\n$$\n\\int_0^1 (1-x^2)^{(3/2)} dx\n$$\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5890486\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n0.5890486 with absolute error < 1.3e-05\n```\n:::\n:::\n\n\nResults are the same again. Yeah!\n\nWhat about when the limits of integration are different?:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5886263\n```\n:::\n:::\n\n\n#### Function 3:\n\n$$\n\\int_{-2}^{2} e^{(x+x^2)} dx\n$$\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 93.16274\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n93.16275 with absolute error < 0.00062\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.729411\n```\n:::\n:::\n\n\nWhat about integrals that have an Infinity for the bounds?\n\n#### Function 4:\n\n$$\n\\int_{0}^{\\infty} x * (1 + x^2)^{-2} dx\n$$\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n0.5 with absolute error < 3.3e-09\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5000037\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2496863\n```\n:::\n:::\n\n\n\n#### Function 5:\n\n$$\n\\int_{-\\infty}^{\\infty} e^{-x^2} dx\n$$\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.772454\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n1.772454 with absolute error < 4.3e-06\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}