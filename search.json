[
  {
    "objectID": "src/Lecture_01.html",
    "href": "src/Lecture_01.html",
    "title": "1. Numerical Integration",
    "section": "",
    "text": "#install.packages(\"devtools\")\nlibrary(devtools)\n\nLoading required package: usethis\n\ninstall_github(\"j-buss/RSSim\")\n\nSkipping install of 'RSSim' from a github remote, the SHA1 (b515ad69) has not changed since last install.\n  Use `force = TRUE` to force installation\n\nlibrary(RSSim)"
  },
  {
    "objectID": "src/Lecture_01.html#pseudorandom-number-generation",
    "href": "src/Lecture_01.html#pseudorandom-number-generation",
    "title": "1. Numerical Integration",
    "section": "3.1 Pseudorandom number generation",
    "text": "3.1 Pseudorandom number generation\n\nMultiplicative Congruential Method\nAlso known as a Lehmer random number generator.\n\\[\nx_n = a x_{n-1} \\,\\text{mod}\\, m\n\\]\nThe limits on the parameters are: \\(0 &lt; x_0 &lt;m\\)\nIf we use the values\n\n\\(a = 2\\)\n\\(m = 7\\)\n\\(x_0 = 6\\)\n\nWe have:\n\n\n\n\\(X\\)\n\n\n\n\n\\(x_0=6\\)\n\n\n\\(x_1=5=2 \\cdot 6 \\;\\text{mod}\\; 7\\)\n\n\n\\(x_2=3=2 \\cdot 5 \\;\\text{mod}\\; 7\\)\n\n\n\\(x_3=6=2 \\cdot 3 \\;\\text{mod}\\; 7\\)\n\n\n\n\nlehmer.seq\n\nfunction (x0, a, m, iterations = 1) \n{\n    counter &lt;- 1\n    temp_val &lt;- x0\n    output_vector &lt;- c(temp_val)\n    while (counter &lt; iterations) {\n        temp_val &lt;- (a * temp_val)%%m\n        output_vector &lt;- c(output_vector, temp_val)\n        counter &lt;- counter + 1\n    }\n    output_vector\n}\n&lt;bytecode: 0x5bfc3c6f6cf0&gt;\n&lt;environment: namespace:RSSim&gt;\n\n\n\nlehmer.seq(x0=6, a=2, m=7, iterations = 10)\n\n [1] 6 5 3 6 5 3 6 5 3 6\n\n\n\nlehmer.rng\n\nfunction (x0, a, m, iterations = 1) \n{\n    lehmer.seq(x0, a, m, iterations)/m\n}\n&lt;bytecode: 0x5bfc3e8302b0&gt;\n&lt;environment: namespace:RSSim&gt;\n\n\n\nlehmer.rng(x0=10, a=9, m=4, iterations=19)\n\n [1] 2.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5\n\n\n\nMixed Congruential Method\nLinear congruential generator (LCG):\n\nlcg.seq\n\nfunction (x0, a, c, m, iterations = 1) \n{\n    counter &lt;- 1\n    temp_val &lt;- x0\n    output_vector &lt;- c(temp_val)\n    while (counter &lt; iterations) {\n        temp_val &lt;- (a * temp_val + c)%%m\n        output_vector &lt;- c(output_vector, temp_val)\n        counter &lt;- counter + 1\n    }\n    output_vector\n}\n&lt;bytecode: 0x5bfc3f55fcf8&gt;\n&lt;environment: namespace:RSSim&gt;\n\n\n\n#lcg.seq()\n\n\nlcg.rng\n\nfunction (x0, a, c, m, iterations = 1) \n{\n    lcg.seq(x0, a, c, m, iterations)/m\n}\n&lt;bytecode: 0x5bfc3fa52df8&gt;\n&lt;environment: namespace:RSSim&gt;\n\n\n\nlcg.rng(x0=3, a=5, c=7, m=200)\n\n[1] 0.015\n\n\n\n#lcg(1)"
  },
  {
    "objectID": "src/Lecture_01.html#using-random-numbers-to-evaluate-integrals",
    "href": "src/Lecture_01.html#using-random-numbers-to-evaluate-integrals",
    "title": "1. Numerical Integration",
    "section": "3.2 Using Random numbers to Evaluate Integrals",
    "text": "3.2 Using Random numbers to Evaluate Integrals"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Just a little website to accompany the class MSSC 6020 at Marquette. Reference textbook for the class is Simulation by Ross Sheldon."
  },
  {
    "objectID": "src/Lecture_05.html",
    "href": "src/Lecture_05.html",
    "title": "5. Symmetric Matrix PDFs",
    "section": "",
    "text": "Multivariate Gamma and Inverse Gamma"
  }
]